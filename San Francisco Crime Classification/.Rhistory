library(ggmap)
library(ggplot2)
library(dplyr)
train <- read.csv("../input/train.csv")
map <- readRDS("../input/sf_map_copyright_openstreetmap_contributors.rds")
map_crime <- function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data=filtered, aes(x=X, y=Y, color=Category, alpha=0.6))
return(plot)
}
map_crime(train, c('SUICIDE', 'ARSON'))
#Loads libraries
library(ggmap)
library(ggplot2)
library(dplyr)
train = read.csv("../input/train.csv")
map = get_map(location="sanfrancisco",zoom=12,source="osm")
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data=filtered, aes(x=X, y=Y, color=Category, alpha=0.6))
return(plot)
}
map_crime(train, c('SUICIDE', 'ARSON'))
train = read.csv("input/train.csv")
map = get_map(location="sanfrancisco",zoom=12,source="osm")
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data=filtered, aes(x=X, y=Y, color=Category, alpha=0.6))
return(plot)
}
map_crime(train, c('SUICIDE', 'ARSON'))
dir()
getwd()
#Loads libraries
library(ggmap)
library(ggplot2)
library(dplyr)
train = read.csv("Data/train.csv")
map = get_map(location="sanfrancisco",zoom=12,source="osm")
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data=filtered, aes(x=X, y=Y, color=Category, alpha=0.6))
return(plot)
}
map_crime(train, c('SUICIDE', 'ARSON'))
names(train)
head(train$Category %in% crime)
head(train$Category %in% 'SUICIDE')
table(train$Category %in% 'SUICIDE')
?geom_point
head(train)
#Function to plot graph of locations of crime
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map) +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.6))
return(plot)
}
#Plots crimes
map_crime(train, c('SUICIDE', 'ARSON'))
#Function to plot graph of locations of crime
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.6))
return(plot)
}
#Plots crimes
map_crime(train, c('SUICIDE', 'ARSON'))
naems(train)
names(train)
table(train$Category)
unique(train$Category)
map_crime(train, unique(train$Category))
map_crime(train, c('PROSTITUTION'))
map_crime(train, c('SEX OFFENSES FORCIBLE, SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSECENE MAT')))
map_crime(train, c('SEX OFFENSES FORCIBLE, SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSECENE MAT'))
map_crime(train, c('SEX OFFENSES FORCIBLE, SEX OFFENSES NON FORCIBLE'))
head(train[train$Category == 'SEX OFFENSES FORCIBLE'])
map_crime(train, c('SEX OFFENSES FORCIBLE', 'SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSECENE MAT'))
head(train$Category[train$Category in 'SEX OFFENSES FORCIBLE'])
head(train$Category[train$Category %in% 'SEX OFFENSES FORCIBLE'])
head(train$Category[train$Category %in% 'PORNOGRAPHY'])
head(train$Category[train$Category %in% 'PORNOGRAPHY/OBSCENCE'])
map_crime(train, c('SEX OFFENSES FORCIBLE', 'SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSCENE MAT '))
map_crime(train, c('SEX OFFENSES FORCIBLE', 'SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSCENE MAT'))
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category % in % crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.8))
return(plot)
}
#Plots crimes
# map_crime(train, c('PROSTITUTION'))
# map_crime(train, c('SEX OFFENSES FORCIBLE', 'SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSCENE MAT'))
map_crime(train, c('PROSTITUTION'))
map_crime(train, c('PROSTITUTION'))
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category % in % crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.8))
return(plot)
}
map_crime(train, c('PROSTITUTION'))
map_crime(train, 'PROSTITUTION')
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.6))
return(plot)
}
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.8))
return(plot)
}
map_crime(train, c('PROSTITUTION'))
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.5))
return(plot)
}
map_crime(train, c('PROSTITUTION'))
map_crime(train, c('DRIVING UNDER THE INFLUENCE', 'FAMILY OFFENSES', 'LIQUOR LAWS', 'RUNAWAY'))
map_crime(train, c('NON-CRIMINAL', 'LOITERING', 'RECOVERED VEHICLE', 'DISORDERLY CONDUCT'))
map_crime(train, c('LARCENY/THEFT', 'VEHICLE THEFT', 'STOLEN PROPERTY', 'ROBBERY'))
test = read,csv('Data/test.csv')
test = read.csv('Data/test.csv')
names(test)
names(train)
head(train)
log_model1 = glm(Category ~ Descript + PdDsitrict + X + Y, data=train, family="binomial")
log_model1 = glm(Category ~ Descript + PdDistrict + X + Y, data=train, family="binomial")
log_model1 = lm(Category ~ Descript + PdDistrict + X + Y, data=train, family="binomial")
log_model1 = lm(Category ~ Descript + PdDistrict + X + Y, data=train)
head(train)
log_model1 = lm(Category ~ PdDistrict + X + Y, data=train)
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family="binomial")
summary(log_model1)
?predict
pred_test1 = predict(newdata=test ,type="class")
pred_test1 = predict(log_model1,newdata=test ,type="class")
pred_test1 = predict(log_model1,newdata=test ,type="reponse")
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="reponse")
summary(glm)
pred_test1 = predict(log_model1,newdata=test ,type="response")
head(pred_test1)
pred_test1 = predict(log_model1,newdata=test ,type="classification")
pred_test1 = predict(log_model1,newdata=test ,type="class")
pred_test1 = predict(log_model1,newdata=test ,type="classification")
head(test)
?data.frame
cat = data.frame(c(test$Id))
names(cat)
cat = data.frame(c(test$Id,unique(train$Category)))
names(cat)
cat
head(cat)
names(cat)
cat = data.frame(c(test$Id))
?rbind
cat[,2] = Dog
cat[,2] = 'Dog'
names(cat)
head(cat)
nrow(unique(train$Category))
ncol(unique(train$Category))
len(unique(train$Category))
length(unique(train$Category))
cat[,length(unique(train$Category))] = 0
names(cat)
cat[,2:length(unique(train$Category))] = 0
names(cat) = c('Id', unique(train$Category))
names(cat)
length(c('Id', unique(train$Category)))
length(cat)
length(save_data)
save_data = data.frame(test$Id)
save_data[,2:length(unique(train$Category))] = 0
length(save_data)
unique(train$Category)
length(save_data)
names(save_data)
save_data[,2:length(unique(train$Category) + 1)] = 0
save_data = data.frame(test$Id)
save_data[,2:length(unique(train$Category)) + 1] = 0
names(save_data)
save_data[,2:length(unique(train$Category)) + 1] = 0
length(unique(train$Category))
length(unique(train$Category)) + 1
save_data[,2:(length(unique(train$Category)) + 1)] = 0
names(save_data) = c('Id', unique(train$Category))
names(save_data)
names(save_data) = c('Id', unique(unfactor(train$Category)))
names(save_data) = c('Id', unique(levels(train$Category)))
names(save_data)
nrow(pred_test1)
dim(pred_test1)
length(pred_test1)
save_data[,2] = pred_test1
head_save[m2]
head_save[,2]
head(save_data)
#San Francisco Crime Classification
#Loads libraries
library(ggmap)
library(ggplot2)
library(dplyr)
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
map = get_map(location="sanfrancisco",zoom=12,source="osm")
#Function to plot graph of locations of crime for visualization purposes
map_crime = function(crime_df, crime) {
filtered <- filter(crime_df, Category %in% crime)
plot <- ggmap(map, extent='device') +
geom_point(data = filtered, aes(x = X, y = Y, color=Category, alpha=0.5))
return(plot)
}
#Plots crimes
# map_crime(train, c('PROSTITUTION'))
# map_crime(train, c('SEX OFFENSES FORCIBLE', 'SEX OFFENSES NON FORCIBLE', 'PORNOGRAPHY/OBSECENE MAT'))
# map_crime(train, c('WARRANTS'))
# map_crime(train, c('LARCENY/THEFT', 'VEHICLE THEFT', 'STOLEN PROPERTY', 'ROBBERY'))
# map_crime(train, c('NON-CRIMINAL', 'LOITERING', 'RECOVERED VEHICLE', 'DISORDERLY CONDUCT'))
# map_crime(train, c('DRIVING UNDER THE INFLUENCE', 'FAMILY OFFENSES', 'LIQUOR LAWS', 'RUNAWAY'))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="classificaion")
#Shaping data for saving
save_data = data.frame(test$Id)
save_data[,2:(length(unique(train$Category)) + 1)] = 0
names(save_data) = c('Id', unique(levels(train$Category)))
save_data[,2] = pred_test1
#Save the data to a csv
write.csv(submission, file="classification.csv", row.names=FALSE)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(test$Id)
save_data[,2:(length(unique(train$Category)) + 1)] = 0
names(save_data) = c('Id', unique(levels(train$Category)))
save_data[,2] = pred_test1
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
