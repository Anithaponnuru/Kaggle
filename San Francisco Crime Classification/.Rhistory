Dates1  = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
print(str(Dates1))
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$XY <- -df$X * df$Y
df$XandY <- -df$X + df$Y
df$AddOf <- sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType <- as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
train<-treatment('train.csv')
print(str(train))
print('Read train data complete...')
test<-treatment('test.csv')
print('Read test data complete...')
##split train data into 10 paritions due to memory space constraint
inTrain<-createDataPartition(train$Category,p=0.55,list=F)
train.sub<-train[inTrain,]
rpart.train<-function(train,test){
submission<-data.frame(Id=test$Id)
response<-data.frame(Cat=train$Category)
crime<-as.character(unique(train$Category))
crime<-sort(crime)
for (i in crime){
response[i]<- 0
response[i][response$Cat==i,]<- 1
fit<-glm(response[,i]~PdDistrict+X+Y+XY+XandY+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred <- predict(fit,test, type = "response")
submission[i]<-pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission<-rpart.train(train.sub,test)
rm(train, test,train.sub)
gz_out <- gzfile("submit.csv.gz", "w")
writeChar(write_csv(submission, ""), gz_out, eos=NULL)
close(gz_out)
install.packages('lubridate')
install.packages('readr')
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
treatment<-function(fname){
df<-read.csv(paste0('../input/',fname))
Dates1  = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
print(str(Dates1))
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$XY <- -df$X * df$Y
df$XandY <- -df$X + df$Y
df$AddOf <- sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType <- as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
train<-treatment('train.csv')
print(str(train))
print('Read train data complete...')
test<-treatment('test.csv')
print('Read test data complete...')
##split train data into 10 paritions due to memory space constraint
inTrain<-createDataPartition(train$Category,p=0.55,list=F)
train.sub<-train[inTrain,]
rpart.train<-function(train,test){
submission<-data.frame(Id=test$Id)
response<-data.frame(Cat=train$Category)
crime<-as.character(unique(train$Category))
crime<-sort(crime)
for (i in crime){
response[i]<- 0
response[i][response$Cat==i,]<- 1
fit<-glm(response[,i]~PdDistrict+X+Y+XY+XandY+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred <- predict(fit,test, type = "response")
submission[i]<-pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission<-rpart.train(train.sub,test)
rm(train, test,train.sub)
gz_out <- gzfile("submit.csv.gz", "w")
writeChar(write_csv(submission, ""), gz_out, eos=NULL)
close(gz_out)
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
treatment<-function(fname){
df<-read.csv(paste0('Data/',fname))
Dates1  = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
print(str(Dates1))
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$XY <- -df$X * df$Y
df$XandY <- -df$X + df$Y
df$AddOf <- sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType <- as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
train<-treatment('train.csv')
print(str(train))
print('Read train data complete...')
test<-treatment('test.csv')
print('Read test data complete...')
##split train data into 10 paritions due to memory space constraint
inTrain<-createDataPartition(train$Category,p=0.55,list=F)
train.sub<-train[inTrain,]
rpart.train<-function(train,test){
submission<-data.frame(Id=test$Id)
response<-data.frame(Cat=train$Category)
crime<-as.character(unique(train$Category))
crime<-sort(crime)
for (i in crime){
response[i]<- 0
response[i][response$Cat==i,]<- 1
fit<-glm(response[,i]~PdDistrict+X+Y+XY+XandY+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred <- predict(fit,test, type = "response")
submission[i]<-pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission<-rpart.train(train.sub,test)
rm(train, test,train.sub)
gz_out <- gzfile("submit.csv.gz", "w")
writeChar(write_csv(submission, ""), gz_out, eos=NULL)
close(gz_out)
head(response)
head(crime)
head(inTrain)
reponse[1]
response[1]
response[,1]
crime
crime<-as.character(unique(train$Category))
crime<-as.character(unique(train$Category))
#San Francisco Crime Classification
#Loads libraries
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
categories = data.frame(cat = unique(levels(train$Category)))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(Id = test$Id)
names(save_data) = c('Id', unique(levels(train$Category)))
for(i in 1:length(categories)){
save_data[,(i + 1)] = 0
inTrain = subset(train, train$Category == as.character(categories[i,])
log = glm(Category[train$Category == as.character(categories[i,])] ~ PdDistrict + X + Y, data=inTrain, family=binomial)
pred = predict(log,newdata=test ,type="response")
save_data[,(i + 1)] = pred
}
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
#San Francisco Crime Classification
#Loads libraries
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
categories = data.frame(cat = unique(levels(train$Category)))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(Id = test$Id)
names(save_data) = c('Id', unique(levels(train$Category)))
for(i in 1:length(categories)){
save_data[,(i + 1)] = 0
inTrain = subset(train, train$Category == as.character(categories[i,]))
log = glm(Category[train$Category == as.character(categories[i,])] ~ PdDistrict + X + Y, data=inTrain, family=binomial)
pred = predict(log,newdata=test ,type="response")
save_data[,(i + 1)] = pred
}
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
#San Francisco Crime Classification
#Loads libraries
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
categories = data.frame(cat = unique(levels(train$Category)))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(Id = test$Id)
for(i in 1:length(categories)){
save_data[,(i + 1)] = 0
inTrain = subset(train, train$Category == as.character(categories[i,]))
log = glm(Category[train$Category == as.character(categories[i,])] ~ X + Y, data=inTrain, family=binomial)
pred = predict(log,newdata=test ,type="response")
save_data[,(i + 1)] = pred
}
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
#San Francisco Crime Classification
#Loads libraries
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
categories = data.frame(cat = unique(levels(train$Category)))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(Id = test$Id)
for(i in 1:length(categories)){
save_data[,(i + 1)] = 0
inTrain = subset(train, train$Category == as.character(categories[i,]))
log = glm(Category[train$Category == as.character(categories[i,])] ~ X + Y, data=inTrain, family=binomial)
pred = predict(log,newdata=test ,type="response")
save_data[,(i + 1)] = pred
print(i)
}
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
1:length(categories)
length(categories)
categories
nrow(categoties)
nrow(categories)
#San Francisco Crime Classification
#Loads libraries
#Initializes data
train = read.csv("Data/train.csv")
test = read.csv('Data/test.csv')
categories = data.frame(cat = unique(levels(train$Category)))
#Trying glm prediction
log_model1 = glm(Category ~ PdDistrict + X + Y, data=train, family=binomial)
pred_test1 = predict(log_model1,newdata=test ,type="response")
#Shaping data for saving
save_data = data.frame(Id = test$Id)
for(i in 1:nrow(categories)){
save_data[,(i + 1)] = 0
inTrain = subset(train, train$Category == as.character(categories[i,]))
log = glm(Category[train$Category == as.character(categories[i,])] ~ X + Y, data=inTrain, family=binomial)
pred = predict(log, newdata=test ,type="response")
save_data[,(i + 1)] = pred
print(i)
}
#Save the data to a csv
write.csv(save_data, file="classification.csv", row.names=FALSE)
categories[,2]
categories[,3]
categories[,4]
categories[,5]
categories[1,]
categories[2,]
categories[3,]
categories[3,]
?MASS
head(submision)
head(submission)
#San Francisco Crime  Classifcation
#Initialize libraries
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$XY = -df$X * df$Y
df$XandY = -df$X + df$Y
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
##split train data into 10 paritions due to memory space constraint
inTrain = createDataPartition(train$Category,p=0.55,list=F)
train.sub = train[inTrain,]
#Function to predict per variable
rpart.train = function(train,test){
submission = data.frame(Id=test$Id)
response = data.frame(Cat=train$Category)
crime = as.character(unique(train$Category))
crime = sort(crime)
for (i in crime){
response[i] =  0
response[i][response$Cat==i,] = 1
fit = glm(response[,i]~PdDistrict+X+Y+XY+XandY+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred = predict(fit,test, type = "response")
submission[i] = pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission = rpart.train(train.sub,test)
#Saves the data
write.csv(submission, file="crimes.csv", row.names=FALSE)
?rm
#San Francisco Crime  Classifcation
#Initialize libraries
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$XY = -df$X * df$Y
df$XandY = -df$X + df$Y
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
##split train data into 10 paritions due to memory space constraint
inTrain = createDataPartition(train$Category,p=0.55,list=F)
train.sub = train[inTrain,]
#Function to predict per variable
rpart.train = function(train,test){
submission = data.frame(Id=test$Id)
response = data.frame(Cat=train$Category)
crime = as.character(unique(train$Category))
crime = sort(crime)
for (i in crime){
response[i] =  0
response[i][response$Cat==i,] = 1
fit = glm(response[,i]~PdDistrict+X+Y+XY+XandY+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred = predict(fit,test, type = "response")
submission[i] = pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission = rpart.train(train.sub,test)
#Saves the data
write.csv(submission, file="crimes.csv", row.names=FALSE)
nrow(submission)
length(submission)
#San Francisco Crime  Classifcation
#Initialize libraries
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
#San Francisco Crime  Classifcation
#Initialize libraries
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
##split train data into 10 paritions due to memory space constraint
inTrain = createDataPartition(train$Category,p=0.55,list=F)
train.sub = train[inTrain,]
#Function to predict per variable
rpart.train = function(train,test){
submission = data.frame(Id=test$Id)
response = data.frame(Cat=train$Category)
crime = as.character(unique(train$Category))
crime = sort(crime)
for (i in crime){
response[i] =  0
response[i][response$Cat==i,] = 1
fit = glm(response[,i]~PdDistrict+X+Y+AddType+DayOfWeek+Year+Hour+Month ,data=train, family = binomial)
pred = predict(fit,test, type = "response")
submission[i] = pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission = rpart.train(train.sub,test)
#Saves the data
write.csv(submission, file="crimes.csv", row.names=FALSE)
warnings()
ncol(submission)
nrow(submission)
head(train)
head(test)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Day = Dates1$day
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
names(train)
names(train)
head(test)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Day = as.numeric(format(ymd_hms(Dates1), "%d"))
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
head*test
head(test)
#San Francisco Crime  Classifcation
#Initialize libraries
library(MASS)
library(readr)
#library (rpart)
library(caret)
library(lubridate)
#Function to setup the reading of data
treatment = function(fname){
df = read.csv(paste0('Data/',fname))
Dates1 = strptime(as.character(df$Dates),"%Y-%m-%d %H:%M:%S")
df$Year = Dates1$year
df$Month = Dates1$mon
df$Day = as.numeric(format(ymd_hms(Dates1), "%d"))
df$Hour = as.numeric(format(ymd_hms(Dates1), "%H"))
df$Loc = as.factor(paste(round(df$X,2), round(df$Y,2), sep= " "))
df$AddOf = sapply(df$Address, FUN=function(x) {strsplit(as.character(x), split="of ")[[1]][2]})
df$AddType = as.factor(ifelse(is.na(df$AddOf ),1,2))
return(df)
}
#Reads the data
train = treatment('train.csv')
test<-treatment('test.csv')
##split train data into 10 paritions due to memory space constraint
inTrain = createDataPartition(train$Category,p=0.55,list=F)
train.sub = train[inTrain,]
#Function to predict per variable
rpart.train = function(train,test){
submission = data.frame(Id=test$Id)
response = data.frame(Cat=train$Category)
crime = as.character(unique(train$Category))
crime = sort(crime)
for (i in crime){
response[i] =  0
response[i][response$Cat==i,] = 1
fit = glm(response[,i]~PdDistrict+X+Y+AddType+DayOfWeek+Year+Hour+Month+Day,data=train, family = binomial)
pred = predict(fit,test, type = "response")
submission[i] = pred
print(paste0(ncol(submission)/length(crime)*100,'% completed'))
}
return(submission)
}
submission = rpart.train(train.sub,test)
#Saves the data
write.csv(submission, file="crimes.csv", row.names=FALSE)
